

    _J_A_V_A___A_P_A_C_H_E___M_A_I_L___E_N_T_E_R_P_R_I_S_E___S_E_R_V_E_R_


  What is it?
  -----------

  The Java Apache Mail Enterprise Server (a.k.a. Apache James) is a 100% pure 
  Java server application designed to be a complete and portable enterprise 
  mail engine solution based on currently available open protocols 
  (SMTP, POP3, IMAP, HTTP).

  Development Status
  ------------------
  
  Current release is under beta test. 
  
  Current Features
  ----------------

  These are some JAMES features:
  
    o  complete portability:  Apache James is be a 100% pure Java application
       based on the Java 2 platform and on to of JavaMail extentions.
       
    o  protocol abstraction:  unlike other mail engines, protocols are seen only
       like "communication languages" ruling comunications between clients and
       the server. Apache James is not be tied to any particular protocol but
       follow an abstracted server design (almost like JavaMail did on the
       client side)
       
    o  complete solution:  the mail system is able to handle both mail
       transport and storage in a single server application. Apache James
       works alone without the need or any other server or solution.
       
    o  servlet support:  Apache James supports MailServlet. This easy-to-write 
       easy-to-use pattern allow to buid powerful mail system. Example can be a 
       mail to fax Servlet, mail to phone, filters, translator, mailling list 
       etc.
    
    o  resource abstraction:  like protocols, resources are abstracted and,
       working thru defined interfaces (JavaMail for transport, JDBC for storage,
       servlet engine abstraction for servlets), the server will be highly 
       modular and reuse solutions from other projects or applications.
       
    o  secure and multi-threaded design:  based on the technology developed for
       the Apache JServ servlet engine, Apache James has a careful, 
       security-oriented, full multi-threaded design, to allow performance, 
       scalability and mission-critical use.
       
    o  Currently JAMES support SMTP, POP3 and a simple remote mailbox manager.
       

  Planned Features
  ----------------

    o  IMAP suppport.
    
    o  IMAP server side filtering.

    o  Download remote inbox to your local inbox.
    
    o  More powerful remote admin protocol and tool.
    
    o  Extended set of Servlet to easily support most mail system request.
    
    o  anything else you may want if you help us writing it :-)
       

  Requirements
  ------------

  - JAMES.jar (of course).
  - javax package (activation.jar, mail.jar)
  - Avalon server framework including:
      Avalon.jar
      Xerces.jar (or any other SAX capable XML Parser).

  JAMES distribution includes all of the above.
  
  To recompile James from sources you should use org.apache.tools.ant and its 
  needed packages (ant.jar, javac.jar, xml.jar).

  Up and working...
  -----------------
  
Step 1: installation.

    Download distibution. Extract all files in the folder you prefere.
    
Step 2: configuration.

  The easy way.
    In the distribution you'll find 3 configuration files:
      /conf/template/JAMES.conf.xml
      /conf/template/avalon.conf.xml
      /conf/avalon.conf.xml
    Forget first two files and backup them somewhere.
    Edit /conf/avalon.conf.xml and fill it with needed configuration follwing
    instructions inside (FILL ME etc.). The file is filled with defaults so that
    you should be able to run JAMES even without adding a single line but of
    course... if you wat JAMES to do what you want you shoul tell him...
    
  The "good" way.
    Avalon is a server framework. It has its own configuration file that should
    be extended adding any installed server confs. So you should merge 
    avalon.conf.xml and JAMES.conf.xml in a single file. This means take each
    element under JAMES.conf.xml and ADD it in the avalon.conf.xml in the same 
    tree level it was. For example copy all <block> in JAMES conf file under 
    <blocks> element and paste lines in avalon conf file under <blocks> element.
    Take each <channel> element under <block ... Logger> <channels> and paste 
    them in avalon under the <block> implementing the Logger interface under
    <channels>. 
    Last thing to paste is Repository definition and public Repository. Follow
    the pattern described above. 
    After that fill all element where required with needed informations.
    This is exactly what I've done from the /template/ files to /conf/avalon.conf.xml.
    
Step 3: run.

    M$ users shuold just run "run.bat" under /bin. Unix users will find run.sh
    under the same folder.
    Running [run.* -help] will provide a simple command line help.
  
  Good luck :)
    


  Licensing and legal issues
  --------------------------

  For legal and licensing issues, please look in the legal section of
  the documentation or read the LICENSE file.

  Thanks.

                                           The Java Apache Project
                                           http://java.apache.org/