<!-- SQL Statements used by James for database access. -->
<sqlResources>

<!-- 
     This section provided configuration to determine the determine the 
     database product which is being used for storage. Different database
     products may require different SQL syntax.
     
     The jdbc database connection is examined to see if it matches with the
     regular expressions specified in any of the defined matchers. The matchers
     are processed in the over provided here, with the first successful match
     defining the "db" value for this connection.
     
     This value is then used to choose between different definitions for various
     named sql statements, defined below. If no match is found, 
     the default sql statements are used.
-->
<dbMatchers>
    <dbMatcher db="mssql" databaseProductName="microsoft sql server"/>
    <dbMatcher db="oracle" databaseProductName="oracle.*"/>
    <dbMatcher db="mysql" databaseProductName="my.*"/>
    <dbMatcher db="postgresql" databaseProductName="postgres.*"/>
</dbMatchers>

<!-- SQL statements to use for various components.

     Parameter definitions ${param} are replaced with parameter values
     from the configuration file.
     
     If a named statement has a definition defined for the current database product,
     then that statement is used. Otherwise the default statement is used.
-->
<!-- SQL statements for the JamesUsersJdbcRepository -->
<sqlDefs name="org.apache.james.userrepository.JamesUsersJdbcRepository">
    <sql name="tableName">${table}</sql>
    <sql name="select">SELECT username, pwdHash, pwdAlgorithm, useForwarding, 
                        forwardDestination, useAlias, alias 
                 FROM ${table}
    </sql>
    <sql name="selectByLowercaseName">
                SELECT username, pwdHash, pwdAlgorithm, useForwarding, 
                        forwardDestination, useAlias, alias 
                FROM ${table}
                WHERE lower(username) = ?
    </sql>
    <sql name="insert">INSERT INTO ${table} 
                    (username, pwdHash, pwdAlgorithm, useForwarding, forwardDestination, useAlias, alias) 
                VALUES (?,?,?,?,?,?,?)
    </sql>
    <sql name="update">UPDATE ${table} SET 
                    pwdHash = ?, pwdAlgorithm = ?, useForwarding = ?, forwardDestination = ?, useAlias = ?, alias = ? 
                WHERE username = ?
    </sql>
    <sql name="delete">DELETE FROM ${table} WHERE username = ?</sql>
    <sql name="createTable">CREATE TABLE ${table} (username VARCHAR(50) NOT NULL, pwdHash VARCHAR(50), pwdAlgorithm VARCHAR(20), useForwarding SMALLINT, forwardDestination VARCHAR(250), useAlias SMALLINT, alias VARCHAR(250), PRIMARY KEY(username))</sql>
    <!-- An example of a database-specific sql statement
    <sql name="createTable" db="mssql">CREATE TABLE ${table} (uniqueId UNIQUEIDENTIFIER, username VARCHAR(50) NOT NULL, pwdHash VARCHAR(50), pwdAlgorithm VARCHAR(20), useForwarding SMALLINT, forwardDestination VARCHAR(250), useAlias SMALLINT, alias VARCHAR(250), PRIMARY KEY(username))</sql>
    -->
</sqlDefs>

<!-- SQL statements for the DefaultUsersJdbcRepository -->
<sqlDefs name="org.apache.james.userrepository.DefaultUsersJdbcRepository">
    <sql name="tableName">${table}</sql>
    <sql name="select">SELECT username, pwdHash, pwdAlgorithm 
                 FROM ${table}
    </sql>
    <sql name="insert">INSERT INTO ${table} 
                    (username, pwdHash, pwdAlgorithm) 
                VALUES (?,?,?)
    </sql>
    <sql name="update">UPDATE ${table} SET 
                    pwdHash = ?, pwdAlgorithm = ?
                WHERE username = ?
    </sql>
    <sql name="delete">DELETE FROM ${table} WHERE username = ?</sql>
    <sql name="createTable">CREATE TABLE ${table} (username VARCHAR(50) NOT NULL, pwdHash VARCHAR(50), pwdAlgorithm VARCHAR(20), PRIMARY KEY(username))</sql>
</sqlDefs>

<!-- SQL statements for the ListUsersJdbcRepository 
        (allowing multiple lists in one table) -->
<sqlDefs name="org.apache.james.userrepository.ListUsersJdbcRepository">
    <!-- An example of defining "default" parameters within the definition file.
         This is used if no listName is specified in config. -->
    <parameters listName="unknownList"/>
    
    <sql name="tableName">${table}</sql>
    <sql name="select">SELECT listSubscriber
                 FROM ${table}
                 WHERE listName = '${listName}'
    </sql>
    <sql name="insert">INSERT INTO ${table} 
                    (listSubscriber, listName) 
                VALUES (?, '${listName}')
    </sql>
    <sql name="update">UPDATE ${table} SET 
                    listSubscriber = ?
                WHERE listSubscriber = ? AND listName = '${listName}'
    </sql>
    <sql name="delete">DELETE FROM ${table} 
                WHERE listSubscriber = ? AND listName = '${listName}'
    </sql>
    <sql name="createTable">CREATE TABLE ${table} (listName VARCHAR(50) NOT NULL, listSubscriber VARCHAR(50) NOT NULL)</sql>
</sqlDefs>

</sqlResources>
