<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd">

<!--
 ! Licensed to the Apache Software Foundation (ASF) under one   !
 ! or more contributor license agreements.  See the NOTICE file !
 ! distributed with this work for additional information        !
 ! regarding copyright ownership.  The ASF licenses this file   !
 ! to you under the Apache License, Version 2.0 (the            !
 ! "License"); you may not use this file except in compliance   !
 ! with the License.  You may obtain a copy of the License at   !
 !                                                              !
 !   http://www.apache.org/licenses/LICENSE-2.0                 !
 !                                                              !
 ! Unless required by applicable law or agreed to in writing,   !
 ! software distributed under the License is distributed on an  !
 ! "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       !
 ! KIND, either express or implied.  See the License for the    !
 ! specific language governing permissions and limitations      !
 ! under the License.                                           !
 -->


<beans>

    <!--
         beans which replace Avalon specific container logic
    -->

    <bean id="fileSystemOverride" class="org.apache.james.container.spring.adaptor.FileSystemBridge"/>
         
    <bean id="serviceManager" class="org.apache.james.container.spring.adaptor.DefaultServiceManagerFactory" >
        <property name="replacements">
            <!-- replacement map. 
                 key must point to an avalon service from james-assembly.xml
                 value must point to a bean
            -->
            <map>
                <entry key="filesystem" value="fileSystemOverride" />
            </map>
        </property>
    </bean>

    <!--
        Logging to log4j
    -->
    <bean id="logger" class="org.apache.james.container.spring.logging.log4j.LoggerToComponentMapper" init-method="init">
        <property name="configurationResource" value="log4j.properties"/>
    </bean>
    
    <!--
        Logging to System.out
    -->
    <!--
    <bean name="logWorker" class="org.apache.james.container.spring.logging.SystemConsoleLogWorker" />

    <bean name="logger, loggerMap" class="org.apache.james.container.spring.adaptor.LoggingBridge" >
        <property name="logWorker" ref="logWorker" />
    </bean>
    -->

    <!-- 
         maps the default standard ports for SMTP, POP3, IMAP, NNTP to non-privileged ports in the
         9000's range (must be activated in "configurationProvider"-bean)
    -->
    <bean id="privilegedPortsConfigurationInterceptor" class="org.apache.james.container.spring.examples.configuration.UnprivilegedPortConfigurationInterceptor" />
    
    <!--
         replaces strings in configuration values
    -->
    <bean id="stringRemapperConfigurationInterceptor" class="org.apache.james.container.spring.examples.configuration.StringRemapperConfigurationInterceptor">
        <property name="mappings">
            <map>
                <!-- avoid having folders be generated outside the working directory -->
                <entry key="../apps/" value="../var/"/>
            </map>
        </property>
    </bean>


    <bean id="configurationProvider" class="org.apache.james.container.spring.adaptor.AvalonConfigurationFileProvider" >
        <property name="configurationResource" value="classpath:james-config.xml" />
        <property name="configurationInterceptors">
            <list>
                <ref bean="stringRemapperConfigurationInterceptor" />
                <!--<ref bean="privilegedPortsConfigurationInterceptor" />-->
            </list>
        </property>
    </bean>

    <bean id="avalonContext" class="org.apache.james.container.spring.adaptor.AvalonContext" >
        <property name="applicationHome" value="data" />
    </bean>

    <!--
        **  JMX part **
        
        to enable exposure of JMX, activate the following beans
        
        NOTE: if you are running JDK < 1.5, you'd have to make a MBeanServer implementation available on the
        classpath, for example mx4j
     -->

    <!--
    <bean id="exporter" class="org.springframework.jmx.export.MBeanExporter" lazy-init="false" >
        <property name="autodetect" value="true" />
        <property name="namingStrategy" ref="namingStrategy" />
    </bean>

    <bean id="namingStrategy" class="org.springframework.jmx.export.naming.KeyNamingStrategy" >
        <property name="mappings" ><props>
            <prop key="fetchmail" >bean:name=fetchmail</prop>
            <prop key="smtpserver" >bean:name=smtpserver</prop>
            <prop key="James" >bean:name=James</prop>
            <prop key="dnsserver" >bean:name=dnsserver</prop>
            <prop key="remotemanager" >bean:name=remotemanager</prop>
            <prop key="pop3server" >bean:name=pop3server</prop>
            <prop key="nntpserver" >bean:name=nntpserver</prop>
            <prop key="virtualusertablemanagement" >bean:name=virtualusertablemanagement</prop>
            <prop key="spoolmanagement" >bean:name=spoolmanagement</prop>
            <prop key="domainlistmanagement" >bean:name=domainlistmanagement</prop>
            <prop key="processormanagement" >bean:name=processormanagement</prop>
            <prop key="bayesiananalyzermanagement" >bean:name=bayesiananalyzermanagement</prop>
            <prop key="usermanagement" >bean:name=usermanagement</prop>
            
            <prop key="serverConnector" >bean:name=serverConnector</prop>
        </props></property>
    </bean>
    

    <bean id="mbeanServer" class="org.springframework.jmx.support.MBeanServerFactoryBean" />

    <bean id="registry" class="org.springframework.remoting.rmi.RmiRegistryFactoryBean">
        <property name="port" value="1099" />
    </bean>
    
    <bean id="serverConnector" class="org.springframework.jmx.support.ConnectorServerFactoryBean" depends-on="registry">
        <property name="objectName" value="connector:name=rmi" />
        <property name="serviceUrl" value="service:jmx:rmi://localhost/jndi/rmi://localhost:1099/jamesmailserver" />    
    </bean>
    -->
    
    <!--
         beans managing bootstrapping and component lifecycle
    -->
    <bean id="loggerPropagator" class="org.apache.james.container.spring.lifecycle.LoggerPropagator" >
        <property name="loggerFactory" ref="logger"/>
    </bean>

    <bean id="contextPropagator" class="org.apache.james.container.spring.lifecycle.ContextPropagator" >
        <property name="context" ref="avalonContext"/>
    </bean>

    <bean id="servicePropagator" class="org.apache.james.container.spring.lifecycle.ServicePropagator" >
        <property name="serviceManagerFactory" ref="serviceManager"/>
    </bean>

    <bean id="configurationManager" class="org.apache.james.container.spring.lifecycle.ConfigurationPropagator" >
        <property name="configurationProvider" ref="configurationProvider"/>
    </bean>

    <bean id="initializationManager" class="org.apache.james.container.spring.lifecycle.InitializationPropagator" />

</beans>




