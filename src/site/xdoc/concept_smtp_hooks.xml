<?xml version="1.0"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.    
-->
<document>

  <properties>
     <title>James Protocols - SMTP Hooks</title>
  </properties>

<body>

   The JAMES SMTP Server Component allows to easy write your own code which will get executed in the SMTP-Transaction. Thats a bit different then using a Mailet a.k.a Mailet-API. As
your code will get executed before the mail was even accepted. This can help you in many ways, most times its used for rejecting SPAM/Junk within the SMTP-Dialog. But it can be used for other
things too. Its up to you and your use case. 

But be aware as your code needs to get executed during the SMTP-Transaction it should not take to long to execute. As it will need to fit in before the timeout was hit which can be different
on every mailserver. But as a general rule as long as your code can get executed within 30 seconds it should be fine.

  <section name="James 3.0-M1">
  

-===== Hooks =====-

The JAMES SMTP Server comes with a few interfaces which helps you to "hook-in" a specific SMTP Command. That means your class which implements the given interface(s) will get
called after the SMTP-Command was parsed and depending on your implementation it will handle it.

In detail the following hooks are supported:

 * AuthHook
 Allows to hook in your code for authenticate users for sending mail via SMTP AUTH. You could for example query your own database table to see if a user should be allowed to 
 send mail with the given username and password

* ConnectionHandler
Allows to hook in your code on a new connection. So you could just drop it or do something else 
 
* HeloHook
Allows to hook in your code in the HELO and EHLO commands.

* MailHook
Allows to hook in your code in the MAIL command. Like checking the sender which was given with MAIL FROM: whatever@example

* MailParametersHook
Allows to hook in given parameters in the EHLO command

* JamesMessageHook
Allow to hook in your code after the email was received via the DATA command and was marked for queuing by the CLRF.CRLF sequence. This will get executed right before the message
will actual get queued. IMPORTANT: If you want to do heavy processing here and not want to reject the method based on a criteria you are most times better of to use the Mailet API!


* QuitHook
Allow to hook in your code in the QUIT command. 


* RcptHook
Allows to hook in your code in the RCPT command. Like implementing a custom logic to check if the mail for a given recipient should get accepted or rejected

* UnknownCmdHook
Allows to hook in your code on every unknown command. 


* Return-Codes
 Each of the above mention Hooks need to return a HookResult to tell the SMTPServer if the next registered Hook should get called or not. For this the HookReturnCode is used. 
 
-=======================-

 
 
 -===== Advanced implementations =====--
 What to do if the Hook API is not enough for you ? You want for example to write a code which handles a new command like "YOURCOOLCOMMAND: whatever@example". For this kind of needs
 you should implement the CommandHandler interface. This gives you a lower-level API to handle this kind of tasks. If you want to support a custom Hook in your CommandHandler its the best
 to just extend AbstractHookableCmdHandler.
 
 
-==== Things to remember ============-
 Be aware that your implementation needs to be thread-safe as it will get used as singleton. If you need to store temporary informations within the SMTP Transaction/Session you should
 use the SMTPSession.getState().put(...) and SMTPSession.getConnectionState().put(...) methods.
 
 For a more explanation see the apidocs for the protocols library which is used by JAMES SMTPServer 
 -===============================-


-===== How to get your implementation loaded after you wrote it =======-
Just create a jar file which contains your code and put it in /path/to/james/conf/lib/ folder. The jar will get picked up by the ClassLoader automatic then. After that open the
smtpserver.xml file and add your hook to the <handlers></handlers> block in the order you want to have it executed. So if you have 2 MailHook implementation make sure the first one 
which is listed in smtpserver.xml is the one you want to call first.


 
  </section>

</body>

</document>
