<!--
    Licensed to the Apache Software Foundation (ASF) under one   
    or more contributor license agreements.  See the NOTICE file 
    distributed with this work for additional information        
    regarding copyright ownership.  The ASF licenses this file   
    to you under the Apache License, Version 2.0 (the            
    "License"); you may not use this file except in compliance   
    with the License.  You may obtain a copy of the License at   
    
    http://www.apache.org/licenses/LICENSE-2.0                 
    
    Unless required by applicable law or agreed to in writing,   
    software distributed under the License is distributed on an  
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       
    KIND, either express or implied.  See the License for the    
    specific language governing permissions and limitations      
    under the License.                                           
-->

<!-- 
    JMS service configuration 

    NOTE: 
      1.  This service is EXPERIMENTAL! 
      2.  Before enabling, uncomment jms in assembly.xml 
          and environment.xml.
      3.  Additionally, uncomment &jmsConfig; in config.xml
-->
<jms enabled="true">

<!-- 
JAMES JMS is provided by an ActiveMQ broker. ActiveMQ supports a wide
range of configurations but only a sample are exposed ATM. See ActiveMQ
documentation for more details.

Attributes:
  jmx        - instruments the broker
  persistent - 
Elements:
  connector  - adds transport point specified by URL
-->
    <activemq-broker 
        jmx='false' 
        persistent='false'>
        <!-- Adds a TCP transport serving port 61616 on the localhost -->
        <!-- Note that no external connectors are required. -->
        <!-- JAMES uses the local (vm) broker interally. --> 
        <!-- Add connectors to allow external access. -->
        <connector>tcp://localhost:61616</connector>
    </activemq-broker>

<!--
Example of a standard consumer. Standard consumers are shipped
with JAMES and are pre-configured by the service.

Types:
  james-in   - feeds consumed mail to JAMES input spool  
-->
    <consumer type='james-in'>
        <!--
        The builder strategy converts message content into a Mail.
        This is an example of a standard builder. Standard builders
        are shipped with JAMES and are pre-configured by the service.
        Types:
           SimpleMailBuilder    - naive implementation suitable for 
                                  generated messages
        -->
        <builder type='SimpleMailBuilder'/>
        <!-- 
        The JMS destination to which the consumer should be bound.
        -->
        <destination>
            <!-- 
            Names the JMS destination.
            -->
            <name>org.apache.james.sample.INPUT</name>
            <!--
            Listens to a queue. 
            -->
            <queue/>
        </destination>
    </consumer>
    
<!--
Example of a custom consumer. The class will be loaded by name
and instantiated through an empty constructor. 
-->
    <consumer classname='org.apache.james.jms.consumer.LogConsumer'>
        <!--
        The builder strategy converts message content into a Mail.
        This is an example of a custom builder. Custom builders
        are loaded by classname by an empty constructor
        -->
        <builder classname='org.apache.james.jms.builder.SimpleMailBuilder'/>
        <!-- 
        The JMS destination to which the consumer should be bound.
        -->
        <destination>
            <!-- 
            Names the JMS destination.
            -->
            <name>org.apache.james.sample.TOPIC</name>
            <!--
            Subscribes to a topic. 
            -->
            <topic/>
        </destination>
    </consumer>
</jms>
