<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd">

	<!--
		! Licensed to the Apache Software Foundation (ASF) under one ! ! or
		more contributor license agreements. See the NOTICE file ! !
		distributed with this work for additional information ! ! regarding
		copyright ownership. The ASF licenses this file ! ! to you under the
		Apache License, Version 2.0 (the ! ! "License"); you may not use this
		file except in compliance ! ! with the License. You may obtain a copy
		of the License at ! ! ! ! http://www.apache.org/licenses/LICENSE-2.0 !
		! ! ! Unless required by applicable law or agreed to in writing, ! !
		software distributed under the License is distributed on an ! ! "AS
		IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY ! ! KIND, either
		express or implied. See the License for the ! ! specific language
		governing permissions and limitations ! ! under the License. !
	-->


<beans>

	<!--
		** JMX part ** to enable exposure of JMX, activate the following beans

		NOTE: if you are running JDK < 1.5, you'd have to make a MBeanServer
		implementation available on the classpath, for example mx4j
	-->

	<!--
	<bean id="exporter" class="org.springframework.jmx.export.MBeanExporter" lazy-init="false"> 
		<property name="autodetect" value="true" /> 
		<property name="namingStrategy" ref="namingStrategy" /> 
	</bean> 
	<bean id="namingStrategy" class="org.springframework.jmx.export.naming.KeyNamingStrategy" >
		<property name="mappings" >
			<props> 
				<prop key="fetchmail"> bean:name=fetchmail</prop> 
				<prop key="smtpserver">bean:name=smtpserver</prop> 
				<prop key="James" >bean:name=James</prop>
				<prop key="dnsserver" >bean:name=dnsserver</prop> 
				<prop key="remotemanager" >bean:name=remotemanager</prop> 
				<prop key="pop3server" >bean:name=pop3server</prop> 
				<prop key="nntpserver">bean:name=nntpserver</prop> 
				<prop key="virtualusertablemanagement">bean:name=virtualusertablemanagement</prop> 
				<prop key="spoolmanagement" >bean:name=spoolmanagement</prop> 
				<prop key="domainlistmanagement" >bean:name=domainlistmanagement</prop>
				<prop key="processormanagement" >bean:name=processormanagement</prop>
				<prop key="bayesiananalyzermanagement">bean:name=bayesiananalyzermanagement</prop> 
				<prop key="usermanagement" >bean:name=usermanagement</prop> 
				<prop key="serverConnector" >bean:name=serverConnector</prop>
			</props>
		</property> 
	</bean> 
		
	<bean id="mbeanServer" class="org.springframework.jmx.support.MBeanServerFactoryBean" />

	<bean id="registry" class="org.springframework.remoting.rmi.RmiRegistryFactoryBean">
		<property name="port" value="1099" /> 
	</bean> 
		
	<bean id="serverConnector" class="org.springframework.jmx.support.ConnectorServerFactoryBean" depends-on="registry"> 
		<property name="objectName" value="connector:name=rmi" /> 
		<property name="serviceUrl" value="service:jmx:rmi://localhost/jndi/rmi://localhost:1099/jamesmailserver" /> 
	</bean>
	-->

	<bean class="org.apache.james.container.spring.lifecycle.AvalonServiceableBeanPostProcessor">
		<property name="order" value="2" />
		<property name="beanRoleMap">
			<map>
				<entry
					key="org.apache.avalon.cornerstone.services.threads.ThreadManager"
					value="thread-manager" />
			</map>
		</property>
	</bean>

	<bean class="org.apache.james.container.spring.lifecycle.AvalonInitializableBeanPostProcessor">
		<property name="order" value="4" />
	</bean>

	<bean class="org.apache.james.container.spring.lifecycle.AvalonConfigurableBeanPostProcessor">
		<property name="configurationProvider" ref="configurationProvider" />
		<property name="order" value="1" />
	</bean>

	<bean class="org.apache.james.container.spring.lifecycle.CommonsConfigurableBeanPostProcessor">
		<property name="configurationProvider" ref="configurationProvider" />
		<property name="order" value="1" />
		<property name="mappings">
			<map>
				<entry key="nntpserver.protocolserver" value="nntpserver" />
				<entry key="nntpserver.protocolhandlerfactory" value="nntpserver" />
				<entry key="mailboxmanager" value="imapserver" />		
				<entry key="mailet" value="James"/>		
			</map>
		</property>
	</bean>

	<bean id="configurationProvider"
		class="org.apache.james.container.spring.lifecycle.SpringConfigurationProvider">
		<property name="configurationResource" value="classpath:james-config.xml" />
	</bean>

	<bean
		class="org.apache.james.container.spring.lifecycle.LogEnabledBeanPostProcessor">
		<property name="logProvider" ref="logProvider" />
		<property name="order" value="0" />
		<property name="mappings">
			<map>
				<entry key="nntpserver.protocolserver" value="nntpserver" />
				<entry key="nntpserver.protocolhandlerfactory" value="nntpserver" />
			</map>
		</property>
	</bean>

	<bean
		class="org.apache.james.container.spring.lifecycle.AvalonLogEnabledBeanPostProcessor">
		<property name="logProvider" ref="logProvider" />
		<property name="order" value="0" />
	</bean>

	<bean id="logProvider"
		class="org.apache.james.container.spring.lifecycle.SpringLogProvider" />


	<bean id="org.apache.james.LoaderService" class="org.apache.james.container.spring.lifecycle.JSR250LoaderService">
		<property name="order" value="3" />
	</bean>

	<bean id="James" class="org.apache.james.James"/>
	
	<bean id="mailet" class="org.apache.james.JamesMailetContext"/>

	<!-- The James Spool Manager block  -->
	<bean id="spoolmanager" class="org.apache.james.transport.JamesSpoolManager" />

	<bean id="matcherpackages" class="org.apache.james.transport.JamesMatcherLoader" />

	<bean id="mailetpackages" class="org.apache.james.transport.JamesMailetLoader" />

	<bean id="dnsserver" class="org.apache.james.dnsserver.DNSServer" />

	<!-- The Spool Management block  -->
	<bean id="spoolmanagement" class="org.apache.james.management.impl.SpoolManagement" />

	<bean id="processormanagement" class="org.apache.james.management.impl.ProcessorManagement" />

	<bean id="bayesiananalyzermanagement"
		class="org.apache.james.management.impl.BayesianAnalyzerManagement" />

	<!-- Async RemoteManager -->
	<bean id="remotemanager" class="org.apache.james.remotemanager.mina.AsyncRemoteManager" />
	
	<!-- The User Management block  -->
	<bean id="usermanagement" class="org.apache.james.impl.user.UserManagement" />

	
	<!-- Async POP3 Server -->
    <bean id="pop3server"  class="org.apache.james.pop3server.mina.AsyncPOP3Server" />
	
	
	<!-- Async SMTP Server -->
	<bean id="smtpserver" class="org.apache.james.smtpserver.mina.AsyncSMTPServer" />

	<bean id="org.apache.james.smtpserver.protocol.DNSService" class="org.apache.james.smtpserver.integration.SMTPServerDNSServiceAdapter" />

	<!-- NNTP Server Beans-->
	<bean id="nntpserver.protocolhandlerfactory" class="org.apache.james.nntpserver.NNTPServerProtocolHandlerFactory" />

	<bean id="nntpserver.protocolserver" class="org.apache.james.socket.AvalonProtocolServer">
		<property name="protocolHandlerFactory" ref="nntpserver.protocolhandlerfactory" />
	</bean>

	<bean id="nntpserver" class="org.apache.james.nntpserver.NNTPServerMBeanImpl">
		<property name="protocolServer" ref="nntpserver.protocolserver" />
	</bean>

	<!-- NNTP Repository -->
	<bean id="nntp-repository" class="org.apache.james.nntpserver.repository.NNTPRepositoryImpl" />


	<!-- FetchMail Service -->
	<bean id="fetchmail" class="org.apache.james.fetchmail.FetchScheduler" />

	<!-- The High Level Storage block -->
	<bean id="mailstore" class="org.apache.james.mailrepository.MailStore" />

	<!-- The main SpoolRepository -->
	<bean id="spoolrepository"
		class="org.apache.james.mailrepository.MailStoreSpoolRepository" />

	<!-- The User Storage block -->
	<bean id="users-store" class="org.apache.james.core.UsersStoreImpl" />

	<!--
		This is needed to link the smtpserver to the local user repository
	-->
	<!--
		LocalJamesUsersRepository is used for backward compatibility with
		James 2.3.0
	-->
	<!-- This is needed to support <usernames> configuraion inside James -->
	<!--
		If backward compatibility is not need the LocalUsersRepository
		implementaion
	-->
	<!-- could be safely used -->
	<bean id="localusersrepository" class="org.apache.james.impl.jamesuser.LocalJamesUsersRepository" />


	<!-- The context FileSystem implementation -->
	<bean id="filesystem" class="org.apache.james.container.spring.adaptor.FileSystemBridge" />

	<!-- The VirtualUserTable Management block  -->
	<bean id="virtualusertablemanagementservice"
		class="org.apache.james.impl.vut.VirtualUserTableManagement" />

	<!-- VirtualUserTable Store -->
	<bean id="virtualusertable-store" class="org.apache.james.core.VirtualUserTableStoreImpl" />


	<bean id="defaultvirtualusertable" name="virtualusertablemanagement" class="org.apache.james.impl.vut.DefaultVirtualUserTable" />

	<!--
		########################################################################
	-->
	<!-- The context domainlist implementation -->
	<bean id="domainlist" class="org.apache.james.domain.XMLDomainList" />

	<!--  JDBC implementation of the domainlist service-->
	<!--
	<bean id="domainlist" class="org.apache.james.domain.JDBCDomainList"/>
	-->

	<!-- JDBC VirtualUserTable implementation of the domainlist service -->
	<!--
	<bean id="domainlist" class="org.apache.james.vut.JDBCVirtualUserTable" />
	-->

	<!-- XML VirtualUserTable implementation of the domainlist service -->
	<!--
	<bean id="domainlist" class="org.apache.james.vut.XMLVirtualUserTable"/>
	-->

	<!-- IMAP server Beans -->
    <bean id="imapserver" name="org.apache.jsieve.mailet.Poster" class="org.apache.james.imapserver.mina.AsyncImapServer">
		<property name="imapDecoder" ref="imapDecoder"/>
		<property name="imapEncoder" ref="imapEncoder"/>	
	</bean>

	<bean id="imapProcessor" class="org.apache.james.imap.processor.main.DefaultImapProcessorFactory" factory-method="createDefaultProcessor">
      	<constructor-arg ref="mailboxmanager"/>
    </bean>
      
    <bean id="imapDecoderFactory" class="org.apache.james.imap.main.DefaultImapDecoderFactory"/>
    <bean id="imapDecoder" factory-bean="imapDecoderFactory"  factory-method="buildImapDecoder"/>
   
    <bean id="imapEncoderFactory" class="org.apache.james.imap.encode.main.DefaultImapEncoderFactory"/>
    <bean id="imapEncoder" factory-bean="imapEncoderFactory"  factory-method="buildImapEncoder"/>
       
	<bean id="authenticator" class="org.apache.james.imapserver.UserRepositoryAuthenticator"/>
	
	
    <!--  Torque implementation of IMAP Storage-->
	<!--  
	<bean id="subscriper" class="org.apache.james.imapserver.UserMetaDataRepositorySubscripter"/>
			
	<bean id="userMetaDataRepository" class="org.apache.james.user.impl.file.FileUserMetaDataRepository">
	 	<constructor-arg index="0" value="var/users"/>
	 </bean>
	 

	 <bean id="mailboxmanager" class="org.apache.james.mailboxmanager.torque.DefaultMailboxManager">
         <constructor-arg index="0" ref="authenticator"/>
         <constructor-arg index="1" ref="subscriper"/>
         <property name="torqueConfig" value="file://conf/torque.properties" />
	</bean>
	-->

	<!-- JPA implementation of IMAP Storage-->
	<bean id ="subscriper" 	class="org.apache.james.imap.jpa.JPASubscriptionManager">
      <constructor-arg index="0" ref="entityManagerFactory"/>
	</bean>
	
	<bean id="mailboxmanager" class="org.apache.james.imap.jpa.openjpa.OpenJPAMailboxManager">
        <constructor-arg index="0" ref="authenticator"/>
        <constructor-arg index="1" ref="subscriper"/>
        <constructor-arg index="2" ref="entityManagerFactory"/>
    </bean>

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="org.apache.derby.jdbc.EmbeddedDriver" />
        <property name="url" value="jdbc:derby:../var/mailboxmanager-derbydb;create=true" />
        <property name="username" value="app" />
        <property name="password" value="app" />
    </bean>
    
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="jpaVendorAdapter" ref="vendorAdapter"/>
    </bean>

    <bean id="vendorAdapter" class="org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter">
        <property name="database" value="DERBY"/>
        <!-- set this to true for debugging purposes -->
        <property name="showSql" value="false"/>
    </bean>
	<!--
		####################################################################
	-->

	<bean id="domainlistmanagement" class="org.apache.james.management.impl.DomainListManagement" />


	<!--
		Configuration for Cornerstone Blocks only after here NOTHING BELOW
		THIS SHOULD NEED CHANGING, (unless you want secure sockets (TLS))
	-->

	<!-- The Connection Manager block -->
	<bean id="connections" class="org.apache.james.socket.SimpleConnectionManager" />

	<!-- The Socket Manager block -->
	<bean id="sockets" class="org.apache.avalon.cornerstone.blocks.sockets.DefaultSocketManager" />

	<!-- The Time Scheduler block -->
	<bean id="scheduler" class="java.util.concurrent.Executors" factory-method="newScheduledThreadPool">
      	<constructor-arg value="20"/>
    </bean>
      
	<!-- The DataSourceSelector block -->
	<bean id="database-connections" class="org.apache.avalon.cornerstone.blocks.datasources.DefaultDataSourceSelector" destroy-method="dispose" />

	<!-- The ThreadManager block -->
	<bean id="thread-manager" class="org.apache.avalon.cornerstone.blocks.threads.DefaultThreadManager" destroy-method="dispose" />

</beans>