<?xml version="1.0"?>
<avalon>
    <servicesmap>
        <service name="JamesMailServer">
            <resource type="org.apache.avalon.blocks.ThreadManager" mapTo="ApacheDefaultThreadManager"/>
            <resource type="org.apache.avalon.blocks.Store" mapTo="JamesObjectStore"/>
            <resource type="org.apache.avalon.blocks.ConnectionManager" mapTo="ApacheDefaultConnectionManager"/>
            <resource type="org.apache.avalon.blocks.TimeServer" mapTo="ApacheDefaultTimeServer"/>
            <resource type="org.apache.avalon.blocks.SocketServer" mapTo="ApacheDefaultSocketServer"/>
        </service>
        <service name="JamesObjectStore">
            <resource type="org.apache.avalon.blocks.Logger" mapTo="ApacheDefaultLogger"/>
            <resource type="org.apache.avalon.blocks.Store" mapTo="JamesObjectStore"/>
        </service>
    </servicesmap>

    <blocks>
        <block class="org.apache.james.James"
               name="JamesMailServer"
               implementedInterface="org.apache.avalon.blocks.MailServer">

            <LogChannel name="James">
                <writer>
                    <destination> file://../logs/jamesinfo.log </destination>
                </writer>
                <level>DEBUG</level>
            </LogChannel>
            <postmaster> root@localhost </postmaster>
            <servernames>
<!--            <servername> To override autodetected server names uncomment this. </servername> -->
<!--            <servername> To override autodetected server names uncomment this. </servername> -->
<!--            <servername> To override autodetected server names uncomment this. </servername> -->
            </servernames>
<!-- Place here the path where incoming mail are temporaly stored before beeing processed.
     (ex. file://c:/james/spool/) -->
            <spoolRepository> file://../var/mail/spool/ </spoolRepository>

            <inboxRepository> file://../var/mail/localinbox/ </inboxRepository>

            <pop3Server>
                <LogChannel name="POP3Server">
                    <writer>
                        <destination> file://../logs/pop3serverinfo.log </destination>
                    </writer>
                    <level>DEBUG</level>
                </LogChannel>
                <port>110</port>
                <pop3handler>
                    <LogChannel name="POP3Handler">
                        <writer>
                            <destination> file://../logs/pop3handlerinfo.log </destination>
                        </writer>
                        <level>DEBUG</level>
                    </LogChannel>
                    <connectiontimeout> 120000 </connectiontimeout>
                </pop3handler>
            </pop3Server>

            <smtpServer>
                <LogChannel name="SMTPServer">
                    <writer>
                        <destination> file://../logs/smtpserverinfo.log </destination>
                    </writer>
                    <level>DEBUG</level>
                </LogChannel>
                <port>25</port>
                <smtphandler>
                    <LogChannel name="SMTPHandler">
                        <writer>
                            <destination> file://../logs/smtphandlerinfo.log </destination>
                        </writer>
                        <level>DEBUG</level>
                    </LogChannel>
                    <connectiontimeout> 120000 </connectiontimeout>
                </smtphandler>
            </smtpServer>

            <remoteManager>
                <LogChannel name="RemoteAdmin">
                    <writer>
                        <destination> file://../logs/remoteadminfo.log </destination>
                    </writer>
                    <level>DEBUG</level>
                </LogChannel>
                <port>4555</port>
                <administrator_accounts>
                    <account login="root" password="root"/>
                </administrator_accounts>
                <connectiontimeout> 60000 </connectiontimeout>
            </remoteManager>

            <usersManager>
                <LogChannel name="UsersManager">
                    <writer>
                        <destination> file://../logs/usersmnginfo.log </destination>
                    </writer>
                    <level>DEBUG</level>
                </LogChannel>
                <repository> file://../var/users/ </repository>
            </usersManager>

            <spoolmanagerthreads> 1 </spoolmanagerthreads>
            <spoolmanager>
                <LogChannel name="James Processor">
                    <writer>
                        <destination> file://../logs/processorinfo.log </destination>
                    </writer>
                    <level>DEBUG</level>
                </LogChannel>
                <MailetLogChannel name="MailetLogChannel">
                    <writer>
                        <destination> file://../logs/mailetinfo.log </destination>
                    </writer>
                    <level>DEBUG</level>
                </MailetLogChannel>
                <DNSservers>
<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- !!!!!!!!!!!!!!!!!!!!!!! FILL ME !!!!!!!!!!!!!!!!!!!!!!! -->
<!-- Place here the list of your DNS servers, one for each <Server> tag-->
                    <server> </server>
                    <server> </server>
                    <server> </server>
<!-- !!!!!!!!!!!!!!!!!!!!!!! FILL ME !!!!!!!!!!!!!!!!!!!!!!! -->
<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
                </DNSservers>
                <authoritative>false</authoritative>
                <repository> file://../var/mail/delayed/ </repository>

                <servletpackages>
                    <servletpackage>org.apache.james.transport.servlet</servletpackage>
                </servletpackages>
<!-- ++++++++++++ BEGIN OF MAIL SERVLET PIPE LINE +++++++++++++ -->
                <servlets>

<!-- Thise servlet acts as system servlet and provides local delivery -->
                    <servlet match="RecipientIsLocal" class="LocalDelivery">
                    </servlet>

<!-- These servlet act as system servlet and provides remote deliver -->
                    <servlet match="!HostIsLocal" class="RemoteDelivery">
                        <delayTime>21600000</delayTime>
                        <maxRetries>5</maxRetries>
                    </servlet>

<!-- The last servlet in the pipe is the one managing errors -->
                    <servlet match="All" class="ToRepository">
                        <repositoryPath> file://../var/mail/errors/ </repositoryPath>
                        <passThrought> false </passThrought>
                    </servlet>
<!-- ++++++++++++ END OF MAIL SERVLET PIPE LINE +++++++++++++ -->
                </servlets>
            </spoolmanager>
        </block>

        <block class="org.apache.avalon.blocks.masterstore.MasterStore"
                name="JamesObjectStore"
                implementedInterface="org.apache.avalon.blocks.Store"
                help="This is an imlpementation of the Store interface and
                    provides a powerful interface to store any kind of objects. Its
                    power resides in its pluggable pattern.">
            <repositoriesDefinition help="Here goes Repository definitions. If
            an application needs its own Repository (see MailRepository
            for JAMES), it will place here its definition. These are default
            Repository.">
                <repository type="OBJECT" model="SYNCHRONOUS, ASYNCHRONOUS"
                    destination="file://"
                    class="org.apache.avalon.blocks.masterstore.PersistentStore"/>
                <repository type="STREAM" model="SYNCHRONOUS, ASYNCHRONOUS"
                    destination="file://"
                    class="org.apache.avalon.blocks.masterstore.StreamStore"/>
                <repository type="MAIL" model="SYNCHRONOUS, ASYNCHRONOUS"
                    destination="file://"
                    class="org.apache.james.MailRepository"/>
                <repository type="USER" model="SYNCHRONOUS, ASYNCHRONOUS"
                    destination="file://"
                    class="org.apache.james.usermanager.UsersRepository"/>
            </repositoriesDefinition>
            <publicrepositories help="When an application needs a Repository for
                    its personal use it can just ask for a private Repository which will
                    be available only to caller application. If, on the other side, it
                    needs to share that repository with other Block the Repository must
                    be defined public since none of these block has 'the right' to own
                    Repository configurations. Place here any public Repository definition">

<!--            <repository name="MyRepository" type="OBJECT" model="SYNCHRONOUS"> file://../myfolder/ </repository> -->
            </publicrepositories>
        </block>

    </blocks>
</avalon>
