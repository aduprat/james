<?xml version="1.0"?>

<document>

 <properties>
  <title>James 2.1 - Using a Database</title>
 </properties>

<body>
<section name="Database Configuration">
<p>James has the capacity to use a JDBC-compatible database for storage of both message and user 
data.  This section explains how to configure James to utilize a database for storage.</p>
<subsection name="Requirements">
<p>Using James with a database backend has certain requirements.  Database configuration is 
extremely vendor-specific, so we can only state the requirements in general terms.</p>
<p>There must be a database instance accessible from the James server.  An account with appropriate
privileges (select, insert, delete into tables, and on initial startup creation of tables) and
with sufficient quota for the data to be inserted into the database must be available.  Also,
since James will use JDBC to access the database, an appropriate JDBC driver must be 
available for installation.</p>
<p>It is important to verify the functionality of the database before attempting to configure 
James to use it as a repository.  This will help ensure that configuration issues are properly
identified.</p>
</subsection>
<subsection name="Connection Configuration">
<p>Configuring the Phoenix container to work with JDBC is the first step in enabling James database support.</p>
<p>First, Phoenix must be able to load the JDBC classes.  To make these classes available to Phoenix, place the 
jar/zip files for the JDBC driver in the lib subdirectory of the James installation directory.  Any additional 
libraries upon which the JDBC library depends that are not part of the standard Java distribution should also be
added to this directory.</p>
<p>Please note that a MySQL driver is included as part of the James distribution and
so there is no need to add such a driver to the lib directory.</p>
<p>Second, the config.xml must be modified so that Phoenix initializes the database connections.  The relevant 
configuration is in the database-connections block.  The database-connections tag has only a single child tag, 
data-sources.  This latter tag is a simple container tag for a number of child elements.  It is these child 
elements, <strong>data-source</strong> elements, that define the database connections.</p>
<p>Each <strong>data-source</strong> tag has a required attribute, <strong>name</strong>.  This value 
must be unique to each <strong>data-source</strong> element.  It is this <strong>name</strong> that will 
be used to specify the database connection in other parts of the config.xml file.</p>
<p>The <strong>data-source</strong> element has five children, all of whom are required.
<ul>
<li><strong>driver</strong> - The class name of the database driver to be used.</li>
<li><strong>dburl</strong> - The JDBC connection URL for your database/driver.</li>
<li><strong>user</strong> - The user id of the database account to be used by this connection.</li>
<li><strong>password</strong> - The password of the database account to be used by this connection.</li>
<li><strong>max</strong> - The maximum number of JDBC connections to be used concurrently by this data-source.</li>
</ul>
</p>
</subsection>
<subsection name="Known Issues">
<p>There are some vendor-specific subtleties in using databases with James that have been observed 
by some users.  These issues (and methods to resolve them) are recorded on the 
<a href="FAQ.html">James FAQ</a> as they are reported.  Please consult the FAQ if you encounter any 
difficulties.</p>
</subsection>
</section>
</body>
</document>
